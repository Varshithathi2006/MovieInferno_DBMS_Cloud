"use strict";(()=>{var e={};e.id=58,e.ids=[58],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},2615:e=>{e.exports=require("http")},8791:e=>{e.exports=require("https")},8621:e=>{e.exports=require("punycode")},6162:e=>{e.exports=require("stream")},7360:e=>{e.exports=require("url")},1568:e=>{e.exports=require("zlib")},8282:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>_,patchFetch:()=>v,requestAsyncStorage:()=>m,routeModule:()=>h,serverHooks:()=>f,staticGenerationAsyncStorage:()=>w});var s={};r.r(s),r.d(s,{DELETE:()=>u,GET:()=>l,POST:()=>c,PUT:()=>p});var i=r(9303),o=r(8716),a=r(670),n=r(7070),d=r(5228);async function l(e){try{let{searchParams:t}=new URL(e.url),r=t.get("user_id");if(!r)return n.NextResponse.json({error:"User ID is required"},{status:400});let{data:s,error:i}=await d.O.from("watchlist").select("*").eq("user_id",r).order("added_date",{ascending:!1});if(i)return console.error("Error fetching watchlist:",i),n.NextResponse.json({error:"Failed to fetch watchlist"},{status:500});let o=await Promise.all(s.map(async e=>{let t=e.movie_id>0,r=Math.abs(e.movie_id),s=t?"movie":"tv",i=null;try{let e=await fetch(`https://api.themoviedb.org/3/${s}/${r}?api_key=df540dc7eced57f912edf1ef5c88ebda`);e.ok&&(i=await e.json())}catch(e){console.error("Error fetching TMDB details:",e)}return{id:e.id,user_id:e.user_id,tmdb_id:r,media_type:s,title:i?.title||i?.name||(t?"Movie":"TV Show"),poster_path:i?.poster_path||null,release_date:i?.release_date||i?.first_air_date||null,vote_average:i?.vote_average||0,overview:i?.overview||null,created_at:e.added_date,watched:e.watched||!1}}));return n.NextResponse.json(o)}catch(e){return console.error("Error in GET /api/watchlist:",e),n.NextResponse.json({error:"Internal server error"},{status:500})}}async function c(e){try{let{user_id:t,tmdb_id:r,media_type:s,title:i,poster_path:o,release_date:a,vote_average:l,overview:c}=await e.json();if(!t||!r||!s)return n.NextResponse.json({error:"Missing required fields: user_id, tmdb_id, media_type"},{status:400});let u="movie"===s?parseInt(r):-parseInt(r),{data:p}=await d.O.from("watchlist").select("id").eq("user_id",t).eq("movie_id",u).single();if(p)return n.NextResponse.json({error:"Item already in watchlist",exists:!0},{status:409});let h={user_id:t,movie_id:u,added_date:new Date().toISOString(),watched:0},{data:m,error:w}=await d.O.from("watchlist").insert([h]).select().single();if(w)return console.error("Error adding to watchlist:",w),n.NextResponse.json({error:"Failed to add to watchlist"},{status:500});let f={id:m.id,user_id:m.user_id,tmdb_id:parseInt(r),media_type:s,title:i||("movie"===s?"Movie":"TV Show"),created_at:m.added_date};return n.NextResponse.json({message:"Added to watchlist successfully",data:f},{status:201})}catch(e){return console.error("Error in POST /api/watchlist:",e),n.NextResponse.json({error:"Internal server error"},{status:500})}}async function u(e){try{let{id:t,user_id:r,tmdb_id:s,media_type:i}=await e.json();if(t){let{data:e,error:s}=await d.O.from("watchlist").delete().eq("id",t).eq("user_id",r).select();if(s)return console.error("Error removing from watchlist:",s),n.NextResponse.json({error:"Failed to remove from watchlist"},{status:500});if(0===e.length)return n.NextResponse.json({error:"Item not found in watchlist"},{status:404});return n.NextResponse.json({message:"Removed from watchlist successfully",data:e[0]})}if(!r||!s||!i)return n.NextResponse.json({error:"Either id or (user_id, tmdb_id, media_type) is required"},{status:400});{let e="movie"===i?parseInt(s):-parseInt(s),{data:t,error:o}=await d.O.from("watchlist").delete().eq("user_id",r).eq("movie_id",e).select();if(o)return console.error("Error removing from watchlist:",o),n.NextResponse.json({error:"Failed to remove from watchlist"},{status:500});if(0===t.length)return n.NextResponse.json({error:"Item not found in watchlist"},{status:404});return n.NextResponse.json({message:"Removed from watchlist successfully",data:t[0]})}}catch(e){return console.error("Error in DELETE /api/watchlist:",e),n.NextResponse.json({error:"Internal server error"},{status:500})}}async function p(e){try{let{user_id:t,tmdb_id:r,media_type:s}=await e.json();if(!t||!r||!s)return n.NextResponse.json({error:"Missing required fields: user_id, tmdb_id, media_type"},{status:400});let i="movie"===s?parseInt(r):-parseInt(r),{data:o,error:a}=await d.O.from("watchlist").select("id, watched").eq("user_id",t).eq("movie_id",i).single();if(a&&"PGRST116"!==a.code)return console.error("Error checking watchlist status:",a),n.NextResponse.json({error:"Failed to check watchlist status"},{status:500});return n.NextResponse.json({inWatchlist:!!o,watched:o?.watched||!1,id:o?.id||null})}catch(e){return console.error("Error in PUT /api/watchlist:",e),n.NextResponse.json({error:"Internal server error"},{status:500})}}let h=new i.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/watchlist/route",pathname:"/api/watchlist",filename:"route",bundlePath:"app/api/watchlist/route"},resolvedPagePath:"C:\\Users\\varshitha-home\\Desktop\\last_hope\\MovieInferno\\app\\api\\watchlist\\route.js",nextConfigOutput:"",userland:s}),{requestAsyncStorage:m,staticGenerationAsyncStorage:w,serverHooks:f}=h,_="/api/watchlist/route";function v(){return(0,a.patchFetch)({serverHooks:f,staticGenerationAsyncStorage:w})}},5228:(e,t,r)=>{r.d(t,{O:()=>s});let s=(0,r(4738).eI)("https://ajnkisostsjhoqfyjsqu.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFqbmtpc29zdHNqaG9xZnlqc3F1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYzOTY0MjQsImV4cCI6MjA3MTk3MjQyNH0.KMvKbgeF2xeCwrFSGXHA0NLqZ9_94kIBs0CiSjkuBkg")}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[948,37,70],()=>r(8282));module.exports=s})();